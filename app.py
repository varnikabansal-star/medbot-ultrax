# MEDBOT Ultra-X Final Version
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import MultiLabelBinarizer
from fpdf import FPDF
import datetime

# --- CONFIG ---
st.set_page_config(page_title="MEDBOT Ultra-X", layout="centered")

# --- DARK/LIGHT MODE ---
st.markdown("""
    <style>
        .main { background-color: #f9f9f9; }
        header { background-color: #f9f9f9; }
    </style>
""", unsafe_allow_html=True)

# --- LANGUAGE TOGGLE ---
lang = st.sidebar.radio("ЁЯМР Language / рднрд╛рд╖рд╛:", ["English", "Hindi"])
translate = lambda e, h: h if lang == "Hindi" else e

# --- SYMPTOMS ---
symptoms = ["Fever", "Cough", "Fatigue", "Nausea", "Shortness of breath", "Sore throat", "Loss of taste", "Muscle pain"]
selected_symptoms = st.multiselect(translate("Select Symptoms", "рд▓рдХреНрд╖рдг рдЪреБрдиреЗрдВ"), symptoms)

# --- DIAGNOSIS MODEL ---
mlb = MultiLabelBinarizer()
X_train = mlb.fit_transform([
    ["Fever", "Cough"],
    ["Fatigue", "Nausea"],
    ["Sore throat", "Cough"],
    ["Loss of taste", "Fever"],
    ["Shortness of breath", "Muscle pain"]
])
y_train = ["Flu", "Food Poisoning", "Cold", "COVID-19", "Asthma"]
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# --- UI HEADER ---
st.title("ЁЯдЦ MEDBOT Ultra-X")
st.caption(translate("Your AI-powered medical assistant.", "рдЖрдкрдХрд╛ рдПрдЖрдИ-рд╕рдХреНрд╖рдо рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрдХред"))

# --- DIAGNOSIS ---
if st.button(translate("ЁЯФН Diagnose Me", "ЁЯФН рдЬрд╛рдВрдЪ рдХрд░реЗрдВ")):
    if selected_symptoms:
        input_data = mlb.transform([selected_symptoms])
        result = model.predict(input_data)[0]
        st.success(translate(f"Possible Condition: {result}", f"рд╕рдВрднрд╛рд╡рд┐рдд рд░реЛрдЧ: {result}"))

        # Health Tips
        tips = {
            "Flu": "Drink warm fluids and rest well.",
            "Food Poisoning": "Stay hydrated, eat bland food.",
            "Cold": "Steam inhalation and rest recommended.",
            "COVID-19": "Isolate and consult a physician.",
            "Asthma": "Avoid allergens, use inhaler as prescribed."
        }
        st.info(translate("ЁЯТб Health Tip:", "ЁЯТб рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реБрдЭрд╛рд╡:") + " " + tips.get(result, "Consult a doctor."))

        # Home Remedies
        home = {
            "Flu": "Tulsi tea, ginger and honey mix.",
            "Cold": "Steam, turmeric milk.",
            "Food Poisoning": "ORS, jeera water.",
            "Asthma": "Steam, avoid cold items."
        }
        if result in home:
            st.warning(translate("ЁЯПб Home Remedy:", "ЁЯПб рдШрд░реЗрд▓реВ рдЙрдкрд╛рдп:") + " " + home[result])
    else:
        st.error(translate("Please select at least one symptom.", "рдХреГрдкрдпрд╛ рдХрдо рд╕реЗ рдХрдо рдПрдХ рд▓рдХреНрд╖рдг рдЪреБрдиреЗрдВред"))

# --- NUTRITION EXPLORER ---
st.markdown("---")
st.header("ЁЯеЧ " + translate("Nutrition Explorer", "рдкреЛрд╖рдг рдЬрд╛рдирдХрд╛рд░реА"))
food = st.selectbox(translate("Choose a food item:", "рднреЛрдЬрди рдЪреБрдиреЗрдВ:"), ["Milk", "Egg", "Banana"])
nutrition = {
    "Milk": {"Calories": 42, "Protein": 3.4, "Calcium": 125},
    "Egg": {"Calories": 78, "Protein": 6, "Cholesterol": 186},
    "Banana": {"Calories": 89, "Potassium": 358, "Fiber": 2.6},
}
if food:
    df = pd.DataFrame([nutrition[food]])
    st.table(df)

# --- MOOD & WATER TRACKER ---
st.markdown("---")
st.header("ЁЯУИ " + translate("Mood & Water Tracker", "рдореВрдб рдФрд░ рдкрд╛рдиреА рдЯреНрд░реИрдХрд░"))
mood = st.slider(translate("Your Mood Today", "рдЖрдЬ рдХрд╛ рдореВрдб"), 0, 10, 5)
water = st.slider(translate("Glasses of Water", "рдкрд╛рдиреА рдХреЗ рдЧрд┐рд▓рд╛рд╕"), 0, 15, 8)
chart_df = pd.DataFrame({"Metric": ["Mood", "Water"], "Score": [mood, water]})
st.plotly_chart(px.bar(chart_df, x="Metric", y="Score", color="Metric", title="Mood & Water Levels"))

# --- PDF GENERATION ---
def generate_pdf(diagnosis):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="MEDBOT Ultra-X Diagnosis Report", ln=1, align="C")
    pdf.cell(200, 10, txt=f"Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}", ln=2, align="L")
    pdf.cell(200, 10, txt=f"Diagnosis: {diagnosis}", ln=3, align="L")
    pdf.output("medbot_report.pdf")
    st.success("ЁЯУД PDF Report Saved as medbot_report.pdf")

if selected_symptoms:
    if st.button("ЁЯУД Generate PDF Report"):
        result = model.predict(mlb.transform([selected_symptoms]))[0]
        generate_pdf(result)

# --- FEEDBACK ---
st.markdown("---")
st.header("ЁЯТм " + translate("Feedback Form", "рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдлрд╝реЙрд░реНрдо"))
name = st.text_input(translate("Your Name", "рдЖрдкрдХрд╛ рдирд╛рдо"))
message = st.text_area(translate("Your Feedback", "рдЖрдкрдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛"))
if st.button(translate("Submit", "рдЬрдорд╛ рдХрд░реЗрдВ")):
    st.success(translate("Thank you for your feedback!", "рдЖрдкрдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!"))

# --- FOOTER ---
st.markdown("---")
st.caption("┬й 2025 MEDBOT Ultra-X | Human-AI Collaboration | Built with тЭдя╕П")
